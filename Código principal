#include <Arduino.h>
#include <stdint.h>
#include "config.h"
#include "display7.h"

#define sensor 32
#define btt1 13
#define led_r 1
#define led_a 5
#define led_v 2
#define servo 12
#define pwmChannel1 0
#define pwmChannel2 1
#define pwmChannel5 2
#define pwmChannel4 3
#define display1 16
#define display2 15
#define display3 22

// VARIABLES GLOBALES
float temperatura = 0;
int posicion_servo = 2;
float Celsius = 0;
float prom;

// Variables volátiles
volatile bool btt_state1;
volatile uint32_t last_btt_state1 = 0;
volatile int posicion=0;

//Timer para multiplexado de display
hw_timer_t *timer=NULL;

// Separación de los dígitos de temperatura
unsigned int valor = 0;
unsigned int decenas = 0;
unsigned int unidades = 0;
unsigned int decimal = 0;

// Adafruit IO
#define IO_LOOP_DELAY 5000
unsigned long lastUpdate = 0;

// Configuración del feed creado
AdafruitIO_Feed *canalTemperatura = io.feed("temperatura");

// Posibles posiciones del servo
const int posiciones[3] = {3277, 4915, 6553};

// Prototipo de funciones
void senal(void);
void LEDS(void);
void indicador_servo(void
// Interrupción para el botón
void initbtt1(void);
void IRAM_ATTR btt1_ISR(void);
// Interrupción para el timer
void initmultiplex(void);
void IRAM_ATTR multiplex(void);


// Rutinas de interrupción
void IRAM_ATTR btt1_ISR(void)
{
  uint32_t tiempo_rebote1 = millis();
  if (tiempo_rebote1 - last_btt_state1 > 50)
  {
    btt_state1 = true;
    last_btt_state1 = tiempo_rebote1;
  }
}

//Multiplexación para los displays con timer
void IRAM_ATTR multiplex(void){
  if (posicion == 0) {
    // Display 1
    digitalWrite(display1, HIGH);
    digitalWrite(display2, LOW);
    digitalWrite(display3, LOW);
    mostrarNumero(decenas);
    mostrarPunto(0);
    posicion = 1; //Se actualiza la posicion de encendido del display
  }
  else if (posicion == 1) {
    // Display 2
    digitalWrite(display1, LOW);
    digitalWrite(display2, HIGH);
    digitalWrite(display3, LOW);
    mostrarNumero(unidades);
    mostrarPunto(1);
    posicion = 2; 
  }
  else {
    // Display 3
    digitalWrite(display1, LOW);
    digitalWrite(display2, LOW);
    digitalWrite(display3, HIGH);
    mostrarNumero(decimal);
    mostrarPunto(0);
    posicion = 0;
}
}

void setup()
{
  // Inicio de la comunicación Serial
  Serial.begin(115200);
  while (!Serial);
  
  //Configuración de adafruit.io
  Serial.print("Connecting to Adafruit IO");

  // Función para conectarse a los servidores de Adafruit
  io.connect();
  // Se espera un momento para conectarse
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  // Indicador de conexión
  Serial.println();
  Serial.println(io.statusText());

  // Configuración de los pines del display
  display7();

  // Configuración de los transistores para los displays
  pinMode(display1, OUTPUT);
  pinMode(display2, OUTPUT);
  pinMode(display3, OUTPUT);

  // Apago todos los displays
  digitalWrite(display1, LOW);
  digitalWrite(display2, LOW);
  digitalWrite(display3, LOW);

  // Configuración de la LED roja
  ledcSetup(pwmChannel1, 100, 12);
  ledcAttachPin(led_r, pwmChannel1);

  // Configuración de la LED verde
  ledcSetup(pwmChannel2, 100, 12);
  ledcAttachPin(led_v, pwmChannel2);

  // Configuración de la LED amarilla
  ledcSetup(pwmChannel5, 100, 12);
  ledcAttachPin(led_a, pwmChannel5);

  // Configuración del Servo
  ledcSetup(pwmChannel4, 50, 16);
  ledcAttachPin(servo, pwmChannel4);

  // Estado inicial
  ledcWrite(pwmChannel1, 0);
  ledcWrite(pwmChannel2, 0);
  ledcWrite(pwmChannel5, 0);
  ledcWrite(pwmChannel4, posiciones[posicion_servo]);

  // Lectura inicial para el filtro
  temperatura = analogRead(sensor);
  
  // Inicialización de las funciones
  initbtt1();
  initmultiplex();
}

void loop()
{
  // Se mantiene conectado al servidor de Adafruit IO
  io.run();

  //Lectura constante de la señal de temperatura
  senal();

  // Lectura del botón
  if (btt_state1 == true)
  {
    // Reseteo del estado del botón
    btt_state1 = false;
    //Encender las LEDS según el rango de temperatura
    LEDS();
    //Posicionamiento del servo según el rango de temperatura
    indicador_servo();
    // Seperación de los dígitos de temperatura
    valor = Celsius * 100;
    decenas = valor / 100;
    valor = valor - (decenas * 100);
    unidades = valor / 10;
    valor = valor - (unidades * 10);
    decimal = valor;
  }
  //Se verifica la lectura de la temperatura
    Serial.print("Temperatura:");
    Serial.println(Celsius);
    Serial.println("°C");


  if (millis() > (lastUpdate + IO_LOOP_DELAY)) {
    // Se guarda la información del canal en Adafruit IO
    Serial.print("sending -> ");
    //Se publica el valor de Celsius en el feed
    canalTemperatura->save(Celsius);

    // Después de enviar la información, se restablece el tiempo actual
    lastUpdate = millis();
  }

}

// Otras funciones
// Funciones de interrupción para el botón
void initbtt1(void)
{
  pinMode(btt1, INPUT);
  attachInterrupt(btt1, &btt1_ISR, RISING);
}
// Obtención de la señal
void senal(void)
{
  int numeroLecturas=10;
  int sumaLecturas=0;
  for (int k=0; k<numeroLecturas; k++){
    sumaLecturas+=analogRead(sensor);
    delay(1);}
  prom=sumaLecturas/(numeroLecturas*1.0);
  float voltaje = (prom*5)/4095.0; 
  Celsius = (voltaje*100)+5; //Ajuste de la temperatura por la mala calibración
}

//Asignación de temperatura a los LEDS
void LEDS(void)
{

  // Encender LED según rango de temperatura
  if (Celsius < 22.0)
  {
    ledcWrite(pwmChannel2, 4095); // Verde
    ledcWrite(pwmChannel1, 0);
    ledcWrite(pwmChannel3, 0);
  }
  if (Celsius >= 22.0 && Celsius < 25.0)
  {
    ledcWrite(pwmChannel5, 4095); // Amarillo
    ledcWrite(pwmChannel1, 0);
    ledcWrite(pwmChannel2, 0);
  }
  if (Celsius > 25)
  {
    ledcWrite(pwmChannel1, 4095); // Rojo
    ledcWrite(pwmChannel2, 0);
    ledcWrite(pwmChannel3, 0);
  }
}

// Asignación de temperatura al servo
void indicador_servo(void)
{
  if (Celsius < 22.0)
  {
    posicion_servo = 2; // Frío (135°)
  }
  else if (Celsius >= 22.0 && Celsius < 25.0)
  {
    posicion_servo = 1; // Normal (90°)
  }
  else if (Celsius >= 25.0)
  {
    posicion_servo = 0; // Caliente (45°)
  }
  ledcWrite(pwmChannel4, posiciones[posicion_servo]);
}

//Inicialización de los displays con timer
void initmultiplex(void){
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &multiplex, true);
  timerAlarmWrite(timer, 1000, true);
  timerAlarmEnable(timer);
}
